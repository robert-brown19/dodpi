Setup SCC

Install OS on memory card with Raspberry Pi Imager
	Latest SCC supported OS (Bullseye)

Boot with HDMI and direct keyboard

Set Userid and Password for admin

run sudo raspi-config
	set wifi country/SSID/Pasword
	enable ssh

run sudo apt -update to check wifi

run ifconfig to capture ip address

power off and undplug hdmi & keyboard

power up and connect via ssh (putty)

logon

on windows PC
run scc
configure host & credintials

Select Content Ubuntu 20_04 LTS
Select "Run content reguardless of applicability"

Run scan
Should return with 12.84%

Note yubikey-manager is for configuring yubikey not PI OS or windows
>>sudo apt install yubikey-manager

Linux and OS X support PIV by using the tools provided by the OpenSC project.

This enables you to sign software, to authenticate over SSH, and so on.

>>sudo apt install -y opensc

>>sudo apt install yubico-piv-tool


>>sudo apt install libpam-yubico #OTP only
>>sudo apt install libpam-pkcs11

Create /etc/pam_pkcs11/pam_pkcs11.conf from "/usr/share/doc/libpam-pkcs11/examples/pam_pkcs11.conf.example"

The Yubico PAM module support two factor authentication for SSH. The two factor authentication module verifies the user name and password for the user and the One-Time Password (OTP) generated by YubiKey assigned to the user.

Install it in your PAM setup by adding a line to an appropriate file in /etc/pam.d/:

auth sufficient pam_yubico.so id=[Your API Client ID] debug
and move pam_yubico.so into /lib/security/ (or wherever PAM modules live in your system) :

mv /usr/local/lib/security/pam_yubico.so /lib/security/

Create a /etc/yubikey_mappings

<first user name>:<YubiKey token ID1>:<YubiKey token ID2>:….
fox-admin:490408554793

Now add authfile=/etc/yubikey_mappings to your PAM configuration line, so it looks like:

auth sufficient pam_yubico.so id=[Your API Client ID] authfile=/etc/yubikey_mappings

>>sudo apt install auditd



>>sudo find /var/log -perm /137 ! -name '*[bw]tmp' ! -name '*lastlog' -type f -exec chmod 640 '{}' \;

>>Configure APT to remove all software components after updated versions have been installed.

Add or updated the following options to the "/etc/apt/apt.conf.d/50unattended-upgrades" file:

Unattended-Upgrade::Remove-Unused-Dependencies "true";
Unattended-Upgrade::Remove-Unused-Kernel-Packages "true";

Install firewall

>>sudo apt install ufw

>>sudo apt install libpam-pwquality -y
>>sudo nano /etc/security/pwquality.conf
review PWQuality.txt
>>sudo apt install apparmor


To generate the key in slot 9A, run:

*>>yubico-piv-tool -s 9a -a generate -o public.pem


*>>
PIV Walk-Through
Getting Started: SSH Authentication with a YubiKey as a Smart Card
Build an app that enables your users to register and authenticate with PIV (Personal Identity Verification). This walk-through describes how to integrate the PIV protocol with your application or framework.

PIV enables RSA or ECC sign/encrypt operations using a private key stored on a smart card, through common interfaces such as PKCS#11. The YubiKey 4 and the YubiKey 5 support not only RSA keys, but also Elliptic Curve Digital Signature Algorithm (ECDSA) keys. Their "touch-policy=always" feature ensures that in addition to entering the PIN, the end-user must touch or tap the Yubikey when prompted. User consent is thus obtained without an intermediary keyboard.

About SSH
SSH (Secure Shell) is a protocol and a software package that enables secure system administration and file transfers over insecure networks. For more information, see the SSH Home Page.

About the Yubico PIV Tool
Use this tool for managing the PIV application on a YubiKey. For more information, see the Yubico PIV Tool page.

The Yubico PIV tool is available on Yubico’s release page for it or on GitHub.

Development Prerequisites
Install:

OpenSSH

For OS X, iOS 10.13 or later.

To implement the PIV security protocol in your app, ensure that your app:

Meets the Personal Identity Verification of Federal Employees and Contractors standards, FIPS 201-2 standard, and the related mobile standard, Derived Personal Identity Verification (PIV) Credentials

Works with a PKCS#11 Cryptographic Token Interface Base Specification OASIS Standard.

Overview
The steps to enable your app to use the PIV protocol vary depending upon the operating system. Note that Certificate Authority (CA) considerations are not taken into account in this Walk-Through.

Import or generate a key in the device slot

Locate the module

Export the public key

Authenticate to the target system

(Optional) Set it up to work with ssh-agent.

Configuration Prerequisites
To manage the PIV security protocol on your PIV-compliant app, on the administrative system, install the Yubico PIV tool and the Yubico PKCS#11 module, ykcs11, which is part of the PIV tool package.

For SSH on PKCS#11, configure public key authentication with OpenSSH through PKCS#11, which provides examples for OS X and Linux systems.

Generate or Import an SSH Private Key with a YubiKey
Step 1: Import or generate a key in any slot. If an external key has been imported and a certificate exists, skip ahead to Step 2, adjusting the command to reflect the slot into which the external key was imported.

To import the key (PEM format) into slot 9A, for example, run:

yubico-piv-tool -s 9a -a import-key -i key.pem
To generate the key in slot 9A, run:

*>>yubico-piv-tool -s 9a -a generate -o public.pem

Step 2: Create a self-signed certificate for the key in slot 9A, and load the certificate.

To create the certificate for the key, run

*>>yubico-piv-tool -a verify-pin -a selfsign-certificate -s 9a -S "/CN=SSH key/" -i public.pem -o cert.pem
To load the certificate into the same slot, run

*>>yubico-piv-tool -a import-certificate -s 9a -i cert.pem


*>>ssh-keygen -D /usr/lib/arm-linux-gnueabihf/pkcs11/opensc-pkcs11.so -e

*>>sudo nano /etc/ssh/sshd_config 
	enable authorized keys
*>>mkdir ~/.ssh
sudo cat piv_pub.pub>>~/.ssh/authorized_keys

*>>sudo cat cert.pem>>~/.ssh/authorized_keys

*>>sudo systemctl restart ssh.service

CAT III Vulnerabilities

>>sudo nano /etc/login.defs
PASS_MIN_DAYS 1
PASS_MAX_DAYS 60

sudo nano /etc/pam.d/common-auth and set the parameter "pam_faildelay" to a value of 4000000 or greater:

sudo nano /etc/security/limits.conf
* hard maxlogins 10

>>sudo apt install chrony
>>sudo nano /etc/chrony/chrony.conf

makestep 1 -1

sudo nano /etc/pam.d/login

session required pam_lastlog.so showfailed

Edit the /etc/pam.d/common-auth file.

Add the following lines below the "auth" definition for pam_unix.so:
auth [default=die] pam_faillock.so authfail
auth sufficient pam_faillock.so authsucc

Configure the "pam_faillock" module to use the following options:

Edit the /etc/security/faillock.conf file and add/update the following keywords and values:
audit
silent
deny = 3
fail_interval = 900
unlock_time = 0
